start_time = time.time()
while len(nodes) > 0:
    elapsed_time = time.time() - start_time
    if (elapsed_time < 80):
    # We've run out of states, no solution.
        if len(nodes) == 0: return None
    # take the node from the front of the queue
        node = nodes.pop(0)
    #state_str = "".join(str(n) for n in node.state)
        state_str = "".join(str(n) for n in node.state)
        if state_str in state_dict:
            continue
        state_dict[state_str] = True
        visited.append(node)
    # if this node is the goal, return the moves it took to get here.
    # print(node.state)
        print(node.state)
        if node.state == goal:
            moves = []
            temp = node
            print(temp.depth)
            while True:
                moves.insert(0, temp.operator)
                if temp.depth <= 1: break
                temp = temp.parent
            return moves
    # Add all the expansions to the beginning of the stack if we are under the depth limit
        if node.depth < depth_limit:
            expanded_nodes = expand_node(node, nodes)
            if(expanded_nodes not in visited):
                expanded_nodes.extend(nodes)
                nodes = expanded_nodes
    else:
        return None
